/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.rules.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.rules.model.Expression;
import com.liferay.yithro.rules.model.ExpressionModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Expression service. Represents a row in the &quot;Yithro_Expression&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ExpressionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpressionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExpressionImpl
 * @generated
 */
@ProviderType
public class ExpressionModelImpl
	extends BaseModelImpl<Expression> implements ExpressionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expression model instance should use the <code>Expression</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_Expression";

	public static final Object[][] TABLE_COLUMNS = {
		{"expressionId", Types.BIGINT}, {"type_", Types.VARCHAR},
		{"field", Types.VARCHAR}, {"operation", Types.VARCHAR},
		{"value", Types.VARCHAR}, {"ruleId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("expressionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ruleId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_Expression (expressionId LONG not null primary key,type_ VARCHAR(75) null,field VARCHAR(75) null,operation VARCHAR(75) null,value VARCHAR(75) null,ruleId LONG)";

	public static final String TABLE_SQL_DROP = "drop table Yithro_Expression";

	public static final String ORDER_BY_JPQL =
		" ORDER BY expression.expressionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_Expression.expressionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long RULEID_COLUMN_BITMASK = 1L;

	public static final long TYPE_COLUMN_BITMASK = 2L;

	public static final long EXPRESSIONID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ExpressionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expressionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpressionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expressionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Expression.class;
	}

	@Override
	public String getModelClassName() {
		return Expression.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Expression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Expression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Expression, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Expression)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Expression, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Expression, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Expression)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Expression, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Expression, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Expression>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Expression.class.getClassLoader(), Expression.class,
			ModelWrapper.class);

		try {
			Constructor<Expression> constructor =
				(Constructor<Expression>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Expression, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Expression, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Expression, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Expression, Object>>();
		Map<String, BiConsumer<Expression, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Expression, ?>>();

		attributeGetterFunctions.put(
			"expressionId", Expression::getExpressionId);
		attributeSetterBiConsumers.put(
			"expressionId",
			(BiConsumer<Expression, Long>)Expression::setExpressionId);
		attributeGetterFunctions.put("type", Expression::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Expression, String>)Expression::setType);
		attributeGetterFunctions.put("field", Expression::getField);
		attributeSetterBiConsumers.put(
			"field", (BiConsumer<Expression, String>)Expression::setField);
		attributeGetterFunctions.put("operation", Expression::getOperation);
		attributeSetterBiConsumers.put(
			"operation",
			(BiConsumer<Expression, String>)Expression::setOperation);
		attributeGetterFunctions.put("value", Expression::getValue);
		attributeSetterBiConsumers.put(
			"value", (BiConsumer<Expression, String>)Expression::setValue);
		attributeGetterFunctions.put("ruleId", Expression::getRuleId);
		attributeSetterBiConsumers.put(
			"ruleId", (BiConsumer<Expression, Long>)Expression::setRuleId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getExpressionId() {
		return _expressionId;
	}

	@Override
	public void setExpressionId(long expressionId) {
		_expressionId = expressionId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public String getField() {
		if (_field == null) {
			return "";
		}
		else {
			return _field;
		}
	}

	@Override
	public void setField(String field) {
		_field = field;
	}

	@Override
	public String getOperation() {
		if (_operation == null) {
			return "";
		}
		else {
			return _operation;
		}
	}

	@Override
	public void setOperation(String operation) {
		_operation = operation;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return "";
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public long getRuleId() {
		return _ruleId;
	}

	@Override
	public void setRuleId(long ruleId) {
		_columnBitmask |= RULEID_COLUMN_BITMASK;

		if (!_setOriginalRuleId) {
			_setOriginalRuleId = true;

			_originalRuleId = _ruleId;
		}

		_ruleId = ruleId;
	}

	public long getOriginalRuleId() {
		return _originalRuleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Expression.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Expression toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Expression>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpressionImpl expressionImpl = new ExpressionImpl();

		expressionImpl.setExpressionId(getExpressionId());
		expressionImpl.setType(getType());
		expressionImpl.setField(getField());
		expressionImpl.setOperation(getOperation());
		expressionImpl.setValue(getValue());
		expressionImpl.setRuleId(getRuleId());

		expressionImpl.resetOriginalValues();

		return expressionImpl;
	}

	@Override
	public int compareTo(Expression expression) {
		long primaryKey = expression.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Expression)) {
			return false;
		}

		Expression expression = (Expression)obj;

		long primaryKey = expression.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ExpressionModelImpl expressionModelImpl = this;

		expressionModelImpl._originalType = expressionModelImpl._type;

		expressionModelImpl._originalRuleId = expressionModelImpl._ruleId;

		expressionModelImpl._setOriginalRuleId = false;

		expressionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Expression> toCacheModel() {
		ExpressionCacheModel expressionCacheModel = new ExpressionCacheModel();

		expressionCacheModel.expressionId = getExpressionId();

		expressionCacheModel.type = getType();

		String type = expressionCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			expressionCacheModel.type = null;
		}

		expressionCacheModel.field = getField();

		String field = expressionCacheModel.field;

		if ((field != null) && (field.length() == 0)) {
			expressionCacheModel.field = null;
		}

		expressionCacheModel.operation = getOperation();

		String operation = expressionCacheModel.operation;

		if ((operation != null) && (operation.length() == 0)) {
			expressionCacheModel.operation = null;
		}

		expressionCacheModel.value = getValue();

		String value = expressionCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			expressionCacheModel.value = null;
		}

		expressionCacheModel.ruleId = getRuleId();

		return expressionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Expression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Expression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Expression, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Expression)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Expression, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Expression, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Expression, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Expression)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Expression>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _expressionId;
	private String _type;
	private String _originalType;
	private String _field;
	private String _operation;
	private String _value;
	private long _ruleId;
	private long _originalRuleId;
	private boolean _setOriginalRuleId;
	private long _columnBitmask;
	private Expression _escapedModel;

}